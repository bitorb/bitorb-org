#+TITLE: Software Installation
#+AUTHOR: Tommy Wang

* Java
  Linux 下我是通过软链接的方式来切换不同的 JDK 和 JRE 版本。
  Mac OSX 下只需 [[http://www.oracle.com/technetwork/java/javase/downloads/index.html][官网下载]] 相应的 dmg 文件，然后按官方的安装教程进行安装，详细过程见参考文档。安装完成后，使用 java_home 命令运行其它的 JDK 版本：
#+BEGIN_EXAMPLE
$ java -version
java version "1.7.0_25"
Java(TM) SE Runtime Environment (build 1.7.0_25-b15)
Java HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)

$ /usr/libexec/java_home -v 1.7.0_07 --exec javac -version
#+END_EXAMPLE
  通过下面语句删除无用的版本：
#+BEGIN_EXAMPLE
$ cd /Library/Java/JavaVirtualMachines/
$ sudo rm -rf jdk1.7.0_07.jdk/
#+END_EXAMPLE
  参考文档：
  + [[http://docs.oracle.com/javase/7/docs/webnotes/install/mac/mac-jdk.html][JDK 7 Installation for Mac OS X]]

* Emacs
** Emacs 编译安装
   作为我使用频率最高的软件，版本升级一定要及时，但从国内 clone 源码库实在是太慢了，只能通过下载最新的源码包进行编译安装。
   如果之前有通过 yum 安装过 Emacs， 要把它先卸载掉，然后从国内的镜像站下载源码包到 /usr/local/src 目录下，并解压缩。
#+BEGIN_EXAMPLE 
$ sudo yum erase emacs
$ cd /usr/local/src
$ sudo wget http://mirror.bjtu.edu.cn/gnu/emacs/emacs-24.3.tar.gz
$ sudo tar xzvf emacs-24.3.tar.gz 
#+END_EXAMPLE
   安装一些编译依赖的软件包，我目前使用的只是 Emacs 的大众功能，所以只要求能成功编译就行。
#+BEGIN_EXAMPLE 
$ sudo yum groupinstall "Development Tools"
$ sudo yum install gtk+-devel gtk2-devel
$ sudo yum install libXpm-devel libpng-devel giflib-devel libtiff-devel libjpeg-devel
$ sudo yum install ncurses-devel
#+END_EXAMPLE
   下面进入解压缩后的源码目录，开始编译，安装，最后做一个执行文件的软链接。
#+BEGIN_EXAMPLE 
$ cd /usr/local/src/emacs-24.3
$ sudo mkdir /usr/local/emacs
$ sudo ./configure --prefix=/usr/local/emacs/24.3
$ sudo make install
$ sudo ln -sf /usr/local/emacs/24.3/bin/emacs /usr/local/bin/emacs
#+END_EXAMPLE
   以上是 Fedora 下 Emacs 编译安装过程，Mac OSX 我直接从 [[http://emacsformacosx.com/]] 下载最新的 dmg 文件安装。
   这个网站的版本更新相当及时，大家评价很高。

** Orgmode 编译安装
   下面的操作 Linux 和 Mac OSX 没有区别，先在 ~/Projects/others/ 目录下 clone 最新的源码，注意不要修改
   这个路径，它已经被写死到 [[http://code.google.com/p/bitorb/source/browse/dot.emacs.d/init-org.el][init-org.el]] 配置文件中了。
#+BEGIN_EXAMPLE 
$ cd ~/Projects/others/
$ git clone git://orgmode.org/org-mode.git
$ cd org-mode/
$ make autoloads
#+END_EXAMPLE

** Emacs 配置
   在前面 Emacs 及各种模式安装完成后，最后做的是 Emacs 配置，Linux 和 Mac OSX 没有区别，还是通过目录软链接的方式，
   注意如果之前有 ~/.emacs.d 目录或者是 ~/.emacs 文件，备份一下，直接删掉，我所有的配置都在  [[http://code.google.com/p/bitorb/source/checkout][bitorb 项目]] 中。
#+BEGIN_EXAMPLE 
$ ln -sf ~/Projects/gaixie/bitorb/dot.emacs.d/ ~/.emacs.d
#+END_EXAMPLE

   到这里位置，Emacs 的配置就结束了，进入 Emacs，并检查相关的版本是否正确。
#+BEGIN_EXAMPLE 
$ emacs

M-x version
M-x org-version
#+END_EXAMPLE

* Thunderbird
  选择 Thunderbird 作为我的邮件客户端的主要原因是它可以同时安装在 Linux 和 Mac OSX 上，相互的数据迁移与恢复比较方便。
  而且这货目前市场占有率那么高，稳定性和易用性应该也不是问题。首先去 [[http://www.mozilla.org/zh-CN/thunderbird/][官网下载]] 相应的版本。

  如果是 Linux，执行下面的命令：
#+BEGIN_EXAMPLE 
$ sudo mkdir /usr/local/thunderbird
$ sudo tar xvf thunderbird-17.0.6.tar.bz2 -C /usr/local/thunderbird/
$ sudo mv /usr/local/thunderbird/thunderbird/ /usr/local/thunderbird/17.0.6
$ sudo ln -sf /usr/local/thunderbird/17.0.6/thunderbird /usr/local/bin/thunderbird
$ sudo ln -sf /usr/local/thunderbird/17.0.6/chrome/icons/default/default256.png /usr/share/pixmaps/thunderbird.png
#+END_EXAMPLE
  上面是我习惯的安装目录，为了以后装新版本方便，做一个软链接到 /usr/local/bin。图标的软链接是为了 GNOME 3 下的桌面图标用的。
  然后要在 ./local/share/applications 目录下创建一个 [[http://code.google.com/p/bitorb/source/browse/dot.local/share/applications/mozilla-thunderbird.desktop][mozilla-thunderbird.desktop]] 文件。这个文件我已经通过 [[http://code.google.com/p/bitorb/source/checkout][bitorb 项目]] clone 
  到我的本地了，只要做一下目录链接。注意如果 applications 目录已存在，要删除掉。如果已做软链接，就不用执行下面的语句。
#+BEGIN_EXAMPLE 
$ ln -sf ~/Projects/gaixie/bitorb/dot.local/share/applications/ ~/.local/share/applications
#+END_EXAMPLE
  最后通过 ALT+F2 r 刷新 gnome，就可以看到 Thunderbird 的启动图标了。启动后会创建一个 ~/.thunderbird 配置目录，把之前备份的
  数据文件恢复过来，要先把 thunderbird 停掉。
#+BEGIN_EXAMPLE 
$ rm -rf ~/.thunderbird/xxxxxxxx.default/*
$ cp -rf ~/backup/yyyyyyyy/default/* ~/.thunderbird/xxxxxxxx.default/
#+END_EXAMPLE
  Mac OSX 下的安装就简单很多了，直接通过 dmg 文件安装。不用做任何软链接，唯一要注意的是它的配置目录在 ~/Library/Thunderbird 下。

* Fossil
  Linux 和 Mac OSX 都采用源码编译方式安装，先从 [[http://www.fossil-scm.org/download.html][官网下载]] 最新的源码包，编译后得到 fossil 可执行文件 ，直接复制到 /usr/local/bin 目录下，
  因为只有一个文件，就不做软链接了。
#+BEGIN_EXAMPLE
$ tar xvf fossil-src-20130618210923.tar
$ cd fossil-src-20130618210923
$ ./configure --with-openssl=none
$ make
$ sudo mv fossil /usr/local/bin
#+END_EXAMPLE
  Linux 不配置 cgi，只通过 fossil ui 或者是 fossil server 来提供对外服务。 
  下面的配置都是针对 Mac OSX 环境。首先在 /Library/WebServer/CGI-Executables 目录创建如下内容的 fsl.cgi 文件。
#+BEGIN_EXAMPLE
#!/usr/local/bin/fossil
directory: /Users/tommy/Projects/fossils
notfound: http://localhost/cgi-bin/fsl.cgi/tommy
#+END_EXAMPLE
  创建一个仓库目录 ~/Projects/fossils，并设置权限让 _www 用户可写。
#+BEGIN_EXAMPLE
$ mkdir ~/Projects/fossils
$ sudo chown tommy:_www ~/Projects/fossils
$ sudo chmod 775 ~/Projects/fossils

# 克隆我的远程仓库
$ cd ~/Projects/fossils
$ fossil clone http://user:password@x.x.x.x:8080/index tommy.fossil
$ chmod 664 tommy.fossil
#+END_EXAMPLE
  参考文档：
  + [[http://www.editrocket.com/articles/perl_apache_mac.html][Running Perl CGI on the Mac OS X Apache Web Server]]
  + [[http://bitorb.wordpress.com/2013/06/05/centos-%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85-fossil-%E5%85%AC%E5%85%B1%E5%BA%93/][CentOS 下配置安装 Fossil 公共库]]
